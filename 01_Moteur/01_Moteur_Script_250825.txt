// Fichier généré le 25/08/2025 à 05:52:07

// --- Début du fichier: MoteurV2.js ---
// =================================================================================
// FICHIER : Moteur V2.js
// RÔLE : Fonctions principales de création et d'orchestration des tests.
// VERSION : 6.1 - Utilisation de getPublishedUrl() pour une fiabilité maximale.
// =================================================================================

/**
 * Gère le déploiement complet (création + mise à jour du statut + lien public).
 */
function lancerDeploiementComplet(rowIndex) {
  Logger.log(`Lancement du déploiement complet pour la ligne ${rowIndex}...`);
  
  try {
    const config = getConfigurationFromRow(rowIndex);

    if (config['Statut'].toLowerCase() !== 'en construction') {
      Logger.log(`La création pour la ligne ${rowIndex} a été ignorée (statut non valide).`);
      return null;
    }

    const nomFichierComplet = "[" + config['Type_Test'] + "] " + config['Titre_Formulaire_Utilisateur'];
    const systemIds = getSystemIds();
    if (!systemIds.ID_TEMPLATE_TRAITEMENT_V2) throw new Error("ID_TEMPLATE_TRAITEMENT_V2 introuvable.");

    let dossierCible;
    if (config['ID_Dossier_Cible']) {
      dossierCible = DriveApp.getFolderById(config['ID_Dossier_Cible']);
    } else {
      if (!systemIds.ID_DOSSIER_CIBLE_GEN) throw new Error("ID_DOSSIER_CIBLE_GEN introuvable.");
      dossierCible = DriveApp.getFolderById(systemIds.ID_DOSSIER_CIBLE_GEN);
    }

    const templateFile = DriveApp.getFileById(systemIds.ID_TEMPLATE_TRAITEMENT_V2);
    const sheetFile = templateFile.makeCopy(nomFichierComplet, dossierCible);
    const reponsesSheetId = sheetFile.getId();

    const form = FormApp.create(nomFichierComplet);
    form.setDestination(FormApp.DestinationType.SPREADSHEET, reponsesSheetId);
    form.setProgressBar(true);
    
    const sousTitre = config['Sous-Titre_Formulaire']; 
    form.setDescription(sousTitre || ""); 

    const formFile = DriveApp.getFileById(form.getId());
    formFile.moveTo(dossierCible);

    // ======================= CORRECTION DÉFINITIVE =======================
    // On utilise la fonction getPublishedUrl() qui est garantie de fonctionner
    // dans votre environnement, comme l'a prouvé notre diagnostic.
    const formUrl = form.getPublishedUrl();
    Logger.log("URL longue obtenue avec succès via getPublishedUrl() : " + formUrl);
    // ====================================================================

    // --- Génération des questions ---
    if (!systemIds.ID_BDD) throw new Error("ID_BDD introuvable.");
    const bdd = SpreadsheetApp.openById(systemIds.ID_BDD);
    
    const blocsMetaConfig = config['Blocs_Meta_A_Inclure'];
    if (blocsMetaConfig && blocsMetaConfig.trim() !== '') {
      const metaIds = blocsMetaConfig.split(',').map(id => id.trim());
      const metaSheet = bdd.getSheetByName('Questions_META_FR'); 
      if (metaSheet) {
        const metaData = metaSheet.getDataRange().getValues();
        const metaHeaders = metaData.shift();
        const idCol = metaHeaders.indexOf('ID');
        const metaQuestionsMap = metaData.reduce((acc, row) => { acc[row[idCol]] = row; return acc; }, {});
        metaIds.forEach(id => {
          if (metaQuestionsMap[id]) {
            const [q_id, q_type_old, q_titre, q_options, q_logique, q_description, q_params_json] = metaQuestionsMap[id];
            let final_meta_type = q_type_old;
            if (q_params_json) { try { const p = JSON.parse(q_params_json); if(p.mode) final_meta_type = p.mode; } catch(e){} }
            creerItemFormulaire(form, final_meta_type, q_titre, q_options, q_description, q_params_json);
          }
        });
      }
    }

    const toutesLesFeuillesBDD = bdd.getSheets();
    const regexLangues = new RegExp('^Questions_' + config['Type_Test'] + '_([A-Z]{2})$', 'i');
    const languesAInclure = [];
    toutesLesFeuillesBDD.forEach(feuille => {
      const match = feuille.getName().match(regexLangues);
      if (match && match[1]) languesAInclure.push({ code: match[1].toUpperCase(), nomComplet: getLangueFullName(match[1]), feuille: feuille });
    });

    if (languesAInclure.length === 0) throw new Error("Aucune feuille de questions trouvée pour le type '" + config['Type_Test'] + "'.");
    
    const itemLangue = form.addMultipleChoiceItem().setTitle("Langue / Language").setRequired(true);
    const choices = [];
    languesAInclure.forEach(langue => {
      const page = form.addPageBreakItem().setTitle("Questions (" + langue.nomComplet + ")");
      choices.push(itemLangue.createChoice(langue.nomComplet, page));
      
      const nbQuestionsDisponibles = langue.feuille.getLastRow() - 1;
      let nbQuestionsAUtiliser = (config['nbQuestions'] && config['nbQuestions'] > 0) ? Math.min(config['nbQuestions'], nbQuestionsDisponibles) : nbQuestionsDisponibles;
      if (nbQuestionsAUtiliser <= 0) return;

      const questionsData = langue.feuille.getRange(2, 1, nbQuestionsAUtiliser, 7).getValues();
      questionsData.forEach((q_data, index) => {
        const [id, type_old, titre, options, logique, description, params_json] = q_data;
        let final_type = type_old;
        if (params_json) { try { const p = JSON.parse(params_json); if(p.mode) final_type = p.mode; } catch(e){} }
        creerItemFormulaire(form, final_type, id + ': ' + titre, options, description, params_json);
        if (index === questionsData.length - 1) page.setGoToPage(FormApp.PageNavigationType.SUBMIT);
      });
    });
    itemLangue.setChoices(choices);

    // --- MISE À JOUR DANS LA FEUILLE CONFIG ---
    const configSheet = SpreadsheetApp.openById(ID_FEUILLE_CONFIGURATION).getSheetByName("Paramètres Généraux");
    const headers = configSheet.getRange(1, 1, 1, configSheet.getLastColumn()).getValues()[0];
    const colIndex = {};
    headers.forEach((header, i) => { if (header) colIndex[header] = i; });

    const STATUT_COL = colIndex['Statut'];
    const ID_UNIQUE_COL = colIndex['Id_Unique'];
    const NOM_FICHIER_COL = colIndex['Nom_Fichier_Complet'];
    const ID_FORM_COL = colIndex['ID_Formulaire_Cible'];
    const ID_SHEET_COL = colIndex['ID_Sheet_Cible'];
    const LIEN_FORM_COL = colIndex['Lien_Formulaire_Public'];

    const idUnique = sheetFile.getId().slice(0, 8) + '-' + formFile.getId().slice(0, 8);
    
    configSheet.getRange(rowIndex, STATUT_COL + 1).setValue('Actif - Déclencheur à activer'); 
    configSheet.getRange(rowIndex, ID_UNIQUE_COL + 1).setValue(idUnique);
    configSheet.getRange(rowIndex, NOM_FICHIER_COL + 1).setValue(nomFichierComplet);
    if (ID_FORM_COL !== undefined) configSheet.getRange(rowIndex, ID_FORM_COL + 1).setValue(formFile.getId());
    if (ID_SHEET_COL !== undefined) configSheet.getRange(rowIndex, ID_SHEET_COL + 1).setValue(sheetFile.getId());
    if (LIEN_FORM_COL !== undefined) configSheet.getRange(rowIndex, LIEN_FORM_COL + 1).setValue(formUrl);
    
    SpreadsheetApp.flush();
    Logger.log(`Ligne ${rowIndex} mise à jour avec le statut 'Actif - Déclencheur à activer'.`);
    
    return { nomFichier: nomFichierComplet, urlSheet: sheetFile.getUrl(), urlForm: formUrl };

  } catch(e) {
    console.error("ERREUR (ligne " + rowIndex + ") : " + e.toString() + "\n" + e.stack);
    SpreadsheetApp.getUi().alert("Une erreur est survenue lors du déploiement pour la ligne " + rowIndex + ": " + e.message);
    return null;
  }
}

// --- Fin du fichier: MoteurV2.js ---

// --- Début du fichier: UtilsV2.js ---
// =================================================================================
// FICHIER : Utils V2.gs (Projet MOTEUR)
// RÔLE    : Fonctions utilitaires pour le Moteur / Usine
// VERSION : 3.1 - getConfigurationFromRow tolérant (résolution sheet/ID/nom) + ECHELLE_NOTE robuste
// =================================================================================

// ⚙️ ID de la feuille de configuration centrale (CONFIG)
const ID_FEUILLE_CONFIGURATION = "1kLBqIHZWbHrb4SsoSQcyVsLOmqKHkhSA4FttM5hZtDQ";

// ------------------------------------
// Helpers génériques
// ------------------------------------
function _normHeader(s) {
  return String(s || '')
    .normalize('NFD').replace(/[\u0300-\u036f]/g, '') // enlève les accents
    .trim();
}
function _normKey(s) {
  return _normHeader(s).toLowerCase();
}
function _normLabel(s){ return _normHeader(s).toLowerCase(); }

// Résout une "feuille de config" depuis : Sheet | Spreadsheet | nom d’onglet | ID spreadsheet | null
function _resolveConfigSheet(sheetLike) {
  // 1) Si on a déjà une Sheet
  if (sheetLike && typeof sheetLike.getLastColumn === 'function' && typeof sheetLike.getRange === 'function') {
    return sheetLike; // c'est bien une Sheet
  }

  // Liste des noms possibles de l’onglet "Paramètres Généraux"
  const CANDIDATE_NAMES = ['Paramètres Généraux','Parametres Generaux','Parameters','Parametres'];

  // 2) Si on a un Spreadsheet
  if (sheetLike && typeof sheetLike.getSheetByName === 'function') {
    for (const name of CANDIDATE_NAMES) {
      const sh = sheetLike.getSheetByName(name);
      if (sh) return sh;
    }
    throw new Error("Onglet 'Paramètres Généraux' introuvable dans le Spreadsheet transmis.");
  }

  // 3) Si on a une chaîne : essayer d’abord comme ID de spreadsheet, sinon comme nom d’onglet dans la CONFIG
  if (typeof sheetLike === 'string' && sheetLike.trim() !== '') {
    const val = sheetLike.trim();

    // a) Essai comme ID de Spreadsheet
    try {
      const ss = SpreadsheetApp.openById(val);
      for (const name of CANDIDATE_NAMES) {
        const sh = ss.getSheetByName(name);
        if (sh) return sh;
      }
      throw new Error("Onglet 'Paramètres Généraux' introuvable dans le spreadsheet " + val);
    } catch (e) {
      // b) Essai comme nom d’onglet dans la CONFIG centrale
      const cfgSS = SpreadsheetApp.openById(ID_FEUILLE_CONFIGURATION);
      const sh = cfgSS.getSheetByName(val);
      if (sh) return sh;
      // c) fallback : on continuera vers CONFIG + noms candidats
    }
  }

  // 4) Fallback : CONFIG centrale + noms candidats
  const cfgSS = SpreadsheetApp.openById(ID_FEUILLE_CONFIGURATION);
  for (const name of CANDIDATE_NAMES) {
    const sh = cfgSS.getSheetByName(name);
    if (sh) return sh;
  }
  throw new Error("Impossible de localiser l'onglet 'Paramètres Généraux' dans la CONFIG centrale.");
}

// ------------------------------------
// IDs système (CONFIG → onglet sys_ID_Fichiers)
// ------------------------------------
function getSystemIds() {
  const configSS = SpreadsheetApp.openById(ID_FEUILLE_CONFIGURATION);
  const idSheet = configSS.getSheetByName('sys_ID_Fichiers');
  if (!idSheet) throw new Error("L'onglet 'sys_ID_Fichiers' est introuvable dans CONFIG.");
  const data = idSheet.getDataRange().getValues();
  const ids = {};
  data.slice(1).forEach(row => {
    if (row[0] && row[1]) ids[row[0]] = row[1];
  });
  return ids;
}

// ------------------------------------
// Lecture d'une ligne de CONFIG (format horizontal)
//  - Accepte rowIndex numérique OU chaîne ("9", "Ligne 9", etc.)
//  - Si invalide, choisit automatiquement une ligne "En construction"
//    (priorité à la dernière SANS ID_Formulaire_Cible), sinon la dernière.
//  - Retourne un objet { en-tête -> valeur } + cfg._rowIndex pour le logging.
// ------------------------------------
function getConfigurationFromRow(sheetLike, rowIndex) {
  const sheet = _resolveConfigSheet(sheetLike);

  // 1) Normaliser la valeur reçue (nombre, string, etc.)
  let idx = rowIndex;
  if (idx !== 0 && !idx) idx = ''; // null/undefined -> ''

  // Essayer d’extraire un entier (ex: "9", " 9 ", "Ligne 9" -> 9)
  if (typeof idx !== 'number') {
    const m = String(idx).match(/\d+/);
    idx = m ? Number(m[0]) : NaN;
  }

  // 2) Lecture des en-têtes
  const lastCol = sheet.getLastColumn();
  const headers = sheet.getRange(1, 1, 1, lastCol).getValues()[0].map(h => String(h || '').trim());
  const mapIdx = {};
  headers.forEach((h,i) => { mapIdx[_normLabel(h)] = i; });

  const iStatut = mapIdx[_normLabel('Statut')];
  const iIdForm = mapIdx[_normLabel('ID_Formulaire_Cible')];

  // 3) Si l’index n’est pas exploitable, sélectionner automatiquement une ligne "En construction"
  if (!idx || isNaN(idx) || idx < 2) {
    const rowCount = Math.max(0, sheet.getLastRow() - 1);
    if (rowCount === 0) throw new Error('getConfigurationFromRow: la feuille CONFIG est vide.');

    const data = sheet.getRange(2, 1, rowCount, lastCol).getValues();

    // a) collecter les lignes "En construction"
    const lignesEC = [];
    data.forEach((row, k) => {
      const statut = (iStatut != null) ? String(row[iStatut] || '').trim().toLowerCase() : '';
      if (statut === 'en construction') {
        const hasIdForm = (iIdForm != null) && String(row[iIdForm] || '').trim() !== '';
        lignesEC.push({ rowIndex: k + 2, hasIdForm, row });
      }
    });

    if (lignesEC.length === 0) {
      throw new Error('getConfigurationFromRow: aucune ligne "En construction" trouvée et rowIndex fourni invalide.');
    }

    // b) Priorité : la DERNIÈRE sans ID_Formulaire_Cible, sinon la DERNIÈRE tout court
    let pick = lignesEC.filter(r => !r.hasIdForm).pop();
    if (!pick) pick = lignesEC.pop();

    idx = pick.rowIndex;
  }

  // 4) Index final validé
  if (!idx || isNaN(idx) || idx < 2) {
    throw new Error('getConfigurationFromRow: rowIndex invalide (' + rowIndex + ')');
  }

  // 5) Renvoi de la config de la ligne choisie
  const values = sheet.getRange(idx, 1, 1, lastCol).getValues()[0];
  const cfg = {};
  headers.forEach((h, i) => { if (h) cfg[h] = values[i]; });
  cfg._rowIndex = idx;
  return cfg;
}

// ------------------------------------
// Langues
// ------------------------------------
function getLangueFullName(code) {
  const map = { FR: 'Français', EN: 'English', ES: 'Español', DE: 'Deutsch' };
  return map[String(code || '').toUpperCase()] || code;
}

// ------------------------------------
// Options pour QCU/QRM
// ------------------------------------
function buildChoices(optionsString, params) {
  if (params && Array.isArray(params.options) && params.options.length > 0) {
    return params.options.map(o => (o && o.libelle) ? String(o.libelle) : '').filter(Boolean);
  }
  if (!optionsString) return [];
  return String(optionsString).split(';').map(s => s.trim()).filter(Boolean);
}

// ------------------------------------
// Création d'items dans le Google Form
//  - gère QRM, QCU, ECHELLE, ECHELLE_NOTE (robuste), EMAIL, TEXTE_COURT
//  - remplace [LIEN_FICHIER:Nom] dans la description si présent
// ------------------------------------
function creerItemFormulaire(form, type, titre, optionsString, description, paramsJSONString) {
  // 1) Résolution [LIEN_FICHIER:...]
  let finalDescription = description;
  const placeholderRegex = /\[LIEN_FICHIER:(.*?)\]/;
  const match = description ? description.match(placeholderRegex) : null;

  if (match && match[1]) {
    const nomFichier = match[1].trim();
    try {
      const systemIds = getSystemIds();
      const bdd = SpreadsheetApp.openById(systemIds.ID_BDD);
      const listeFichiersSheet = bdd.getSheetByName('Liste_Fichiers_Drive');

      if (listeFichiersSheet) {
        const data = listeFichiersSheet.getDataRange().getValues();
        const fileRow = data.find(row => String(row[0] || '').trim() === nomFichier);
        if (fileRow && fileRow[1]) {
          const fileId = String(fileRow[1]).trim();
          const fileUrl = `https://drive.google.com/file/d/${fileId}/view`;
          finalDescription = description.replace(placeholderRegex, fileUrl);
        } else {
          finalDescription = description.replace(placeholderRegex, `[ERREUR: Fichier '${nomFichier}' introuvable dans la BDD]`);
        }
      } else {
        finalDescription = description.replace(placeholderRegex, `[ERREUR: Onglet 'Liste_Fichiers_Drive' introuvable]`);
      }
    } catch (e) {
      Logger.log("Erreur lien fichier : " + e.message);
      finalDescription = description.replace(placeholderRegex, `[ERREUR SCRIPT: ${e.message}]`);
    }
  }

  // 2) Parsing JSON souple
  let params = null;
  if (paramsJSONString && String(paramsJSONString).trim() !== '') {
    try { params = JSON.parse(paramsJSONString); } catch (e) { params = null; }
  }

  // 3) Construction des choix si nécessaire
  const choices = buildChoices(optionsString, params);

  // 4) Création de l'item selon le type
  let item = null;
  const formItemType = type ? String(type).toUpperCase() : '';

  if (formItemType.startsWith('QRM')) {
    if (choices.length > 0) {
      item = form.addCheckboxItem().setTitle(titre).setChoiceValues(choices).setRequired(true);
    } else {
      item = form.addParagraphTextItem().setTitle("[Erreur QRM: Options manquantes] " + titre);
    }

  } else if (formItemType.startsWith('QCU')) {
    if (choices.length > 0) {
      item = form.addMultipleChoiceItem().setTitle(titre).setChoiceValues(choices).setRequired(true);
    } else {
      item = form.addParagraphTextItem().setTitle("[Erreur QCU: Options manquantes] " + titre);
    }

  } else if (formItemType === 'ECHELLE_NOTE') { // ✅ v3.1 robuste : min/max OU echelle_min/echelle_max + labels tolérants
    if (params) {
      const eMin = (params.echelle_min ?? params.min);
      const eMax = (params.echelle_max ?? params.max);
      if (eMin != null && eMax != null) {
        const scaleItem = form.addScaleItem()
          .setTitle(titre)
          .setBounds(Number(eMin), Number(eMax))
          .setRequired(true);

        // Labels : label_min / libelle_min / labelMin  (idem pour _max)
        const lmin = (params.label_min ?? params.libelle_min ?? params.labelMin);
        const lmax = (params.label_max ?? params.libelle_max ?? params.labelMax);
        if (lmin && lmax) scaleItem.setLabels(String(lmin), String(lmax));

        item = scaleItem;
      } else {
        item = form.addParagraphTextItem()
          .setTitle("[Erreur ECHELLE_NOTE: Paramètres JSON incomplets (min/max)] " + titre);
      }
    } else {
      item = form.addParagraphTextItem()
        .setTitle("[Erreur ECHELLE_NOTE: Paramètres JSON absents] " + titre);
    }

  } else if (formItemType === 'ECHELLE') { // compat historique
    const parts = optionsString ? optionsString.split(';').map(s => s.trim()) : [];
    const min = parts[0] ? Number(parts[0]) : 1;
    const max = parts[parts.length - 1] ? Number(parts[parts.length - 1]) : 5;
    const scaleItem = form.addScaleItem().setTitle(titre).setBounds(min, max).setRequired(true);
    item = scaleItem;

  } else if (formItemType === 'EMAIL') {
    const textItem = form.addTextItem().setTitle(titre).setRequired(true);
    const emailValidation = FormApp.createTextValidation().requireTextIsEmail().build();
    item = textItem.setValidation(emailValidation);

  } else if (formItemType === 'TEXTE_COURT') {
    item = form.addTextItem().setTitle(titre).setRequired(true);

  } else {
    item = form.addParagraphTextItem().setTitle("[Type Inconnu: " + type + "] " + titre);
  }

  // 5) HelpText (évite d’écraser les labels d’échelle)
  if (finalDescription && item && typeof item.setHelpText === 'function') {
    if (formItemType !== 'ECHELLE' && formItemType !== 'ECHELLE_NOTE') {
      item.setHelpText(finalDescription);
    }
  }
}

// --- Fin du fichier: UtilsV2.js ---

// --- Début du fichier: InterfaceV2.js ---
// =================================================================================
// FICHIER : Interface V2.js
// RÔLE : Création du menu utilisateur et fonctions appelées par ce menu.
// VERSION : 4.2 - Ajout de l'outil de migration V1 -> V2 dans le menu
// =================================================================================

/**
 * Crée le menu personnalisé dans l'interface utilisateur de Google Sheets à l'ouverture.
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('🏭 Usine à Tests')
    .addItem("🚀 Déployer un test de A à Z...", "orchestrateurDeploiementComplet_UI")
    .addSeparator()
    .addItem("Générer un test (choisir la ligne)", "lancerCreationDepuisPilote_UI")
    .addItem("Traiter TOUTES les nouvelles demandes", "orchestrateurCreationAutomatique_UI")
    // --- AJOUT ---
    .addSeparator()
    .addItem("🔧 Migrer les Questions (V1 -> V2)", "lancerMigrationV1versV2")
    .addToUi();
}

/**
 * Orchestre le déploiement complet d'un test depuis l'UI.
 * Gère la génération du kit ET guide l'utilisateur pour l'activation et le partage.
 */
function orchestrateurDeploiementComplet_UI() {
  const ui = SpreadsheetApp.getUi();
  
  const response = ui.prompt(
    '🚀 Déploiement de A à Z',
    'Entrez le numéro de la ligne à déployer entièrement :',
    ui.ButtonSet.OK_CANCEL
  );

  if (response.getSelectedButton() !== ui.Button.OK || response.getResponseText() === '') {
    return;
  }

  const rowIndex = parseInt(response.getResponseText(), 10);
  if (isNaN(rowIndex) || rowIndex <= 1) {
    ui.alert('Numéro de ligne invalide. Veuillez entrer un nombre supérieur à 1.');
    return;
  }
  
  ui.alert('Lancement du déploiement complet... Cette opération peut prendre un moment.');

  try {
    const resultats = lancerDeploiementComplet(rowIndex);

    if (resultats && resultats.urlSheet && resultats.urlForm) {
      const htmlOutput = HtmlService.createHtmlOutput(
        `<h4>✅ Déploiement Réussi !</h4>` +
        `<p>Le kit "<b>${resultats.nomFichier}</b>" a été généré.</p><hr>` +
        `<p><b>1. Voici le lien public du formulaire à partager :</b></p>` +
        `<p style="margin-top:10px;"><a href="${resultats.urlForm}" target="_blank" style="background-color:#34A853; color:white; padding:8px 12px; text-decoration:none; border-radius:4px;">Copier ou ouvrir le lien du Formulaire</a></p><br>` +
        `<p><b>2. ACTION FINALE REQUISE (pour que le test fonctionne) :</b></p>` +
        `<p>Cliquez sur le lien ci-dessous, puis dans le menu :<br>` +
        `<b>&nbsp;&nbsp;&nbsp;⚙️ Actions du Kit -> Activer le traitement des réponses</b>.</p>` +
        `<p style="margin-top:10px;"><a href="${resultats.urlSheet}" target="_blank" style="background-color:#4285F4; color:white; padding:8px 12px; text-decoration:none; border-radius:4px;">Ouvrir le Kit pour l'activer</a></p>`
      )
      .setWidth(500)
      .setHeight(320);
      ui.showModalDialog(htmlOutput, "Déploiement Terminé");

    } else {
      ui.alert(`ℹ️ Le déploiement pour la ligne ${rowIndex} a été ignoré (le statut n'était probablement pas 'En construction').`);
    }

  } catch (e) {
    Logger.log(`ERREUR Critique lors du déploiement complet (ligne ${rowIndex}) : ${e.toString()}`);
    ui.alert(`❌ ERREUR : Le déploiement a échoué pour la ligne ${rowIndex}. Consultez les logs pour les détails. Message : ${e.message}`);
  }
}

/**
 * Fonction UI appelée par le menu pour lancer la création manuelle (une seule ligne).
 */
function lancerCreationDepuisPilote_UI() {
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt('Lancement de la création', 'Entrez le numéro de la ligne à utiliser :', ui.ButtonSet.OK_CANCEL);

  if (response.getSelectedButton() !== ui.Button.OK) {
    return;
  }

  const rowIndex = parseInt(response.getResponseText(), 10);
  if (isNaN(rowIndex) || rowIndex <= 1) {
    ui.alert('Numéro de ligne invalide. Veuillez entrer un nombre supérieur à 1.');
    return;
  }

  try {
    ui.alert('Lancement de la création... Cette opération peut prendre un moment.');
    
    const resultats = lancerCreationSysteme(rowIndex);

    if (resultats) {
      const configSheet = SpreadsheetApp.openById(ID_FEUILLE_CONFIGURATION).getSheetByName("Paramètres Généraux");
      
      const headers = configSheet.getRange(1, 1, 1, configSheet.getLastColumn()).getValues()[0];
      const colIndex = {};
      headers.forEach((header, i) => { if (header) colIndex[header] = i; });
      
      const STATUT_COL = colIndex['Statut'];
      const ID_UNIQUE_COL = colIndex['Id_Unique'];
      const NOM_FICHIER_COL = colIndex['Nom_Fichier_Complet'];
      const ID_FORM_COL = colIndex['ID_Formulaire_Cible'];
      const ID_SHEET_COL = colIndex['ID_Sheet_Cible'];

      const idUnique = resultats.sheetFile.getId().slice(0, 8) + '-' + resultats.formFile.getId().slice(0, 8);
      configSheet.getRange(rowIndex, STATUT_COL + 1).setValue('Actif');
      configSheet.getRange(rowIndex, ID_UNIQUE_COL + 1).setValue(idUnique);
      configSheet.getRange(rowIndex, NOM_FICHIER_COL + 1).setValue(resultats.nomFichierComplet);
      if (ID_FORM_COL !== undefined) configSheet.getRange(rowIndex, ID_FORM_COL + 1).setValue(resultats.formFile.getId());
      if (ID_SHEET_COL !== undefined) configSheet.getRange(rowIndex, ID_SHEET_COL + 1).setValue(resultats.sheetFile.getId());
      
      SpreadsheetApp.flush();
      ui.alert(`✅ SUCCÈS : Le test '${resultats.nomFichierComplet}' a été créé et la ligne ${rowIndex} a été mise à jour.`);
      
    } else {
       ui.alert(`ℹ️ La création pour la ligne ${rowIndex} a été ignorée (le statut n'était probablement pas 'En construction').`);
    }

  } catch (e) {
    try {
        const configSheet = SpreadsheetApp.openById(ID_FEUILLE_CONFIGURATION).getSheetByName("Paramètres Généraux");
        const headers = configSheet.getRange(1, 1, 1, configSheet.getLastColumn()).getValues()[0];
        const statutColIndex = headers.indexOf('Statut');
        if (statutColIndex !== -1) {
            configSheet.getRange(rowIndex, statutColIndex + 1).setValue('ERREUR');
        }
    } catch (err) {
        Logger.log(`Impossible de mettre le statut à ERREUR pour la ligne ${rowIndex}. Erreur : ${err.message}`);
    }

    Logger.log(`ERREUR Critique lors de la création manuelle (ligne ${rowIndex}) : ${e.toString()}`);
    ui.alert(`❌ ERREUR : Une erreur critique est survenue pour la ligne ${rowIndex}. Le statut a été mis à 'ERREUR'. Consultez les logs pour les détails. Message : ${e.message}`);
  }
}

/**
 * Fonction UI pour lancer le traitement en masse de toutes les demandes "En construction".
 */
function orchestrateurCreationAutomatique_UI() {
  const ui = SpreadsheetApp.getUi();
  try {
    const lignesTraitees = orchestrateurCreationAutomatique();
    ui.alert(`Traitement terminé. ${lignesTraitees} nouvelle(s) demande(s) ont été traitée(s).`);
  } catch (e) {
    Logger.log(`ERREUR Critique dans l'orchestrateur : ${e.toString()}`);
    ui.alert(`Une erreur critique est survenue : ${e.message}`);
  }
}
// --- Fin du fichier: InterfaceV2.js ---

// --- Début du fichier: MigrationV1.js ---
// =================================================================================
// FONCTION DE MIGRATION V1 -> V2 (JSON)
// RÔLE : Convertit les questions d'un ancien format (Options/Logique)
//         vers le nouveau format V2 (Paramètres (JSON)).
// VERSION : 1.4 - Version finale et corrigée
// =================================================================================

/**
 * Fonction principale appelée depuis le menu de l'interface utilisateur.
 */
function lancerMigrationV1versV2() {
  try {
    const ID_BDD = '1m2MGBd0nyiAl3qw032B6Nfj7zQL27bRSBexiOPaRZd8';

    const ui = SpreadsheetApp.getUi();
    const response = ui.prompt(
      'Outil de Migration V1 -> V2',
      'Veuillez entrer le nom exact de l\'onglet dans la BDD à migrer :',
      ui.ButtonSet.OK_CANCEL);

    if (response.getSelectedButton() == ui.Button.OK && response.getResponseText() != '') {
      const sheetName = response.getResponseText().trim();
      
      const bdd = SpreadsheetApp.openById(ID_BDD);
      if (!bdd) { throw new Error(`Impossible d'ouvrir la BDD avec l'ID fourni.`); }
      const sheet = bdd.getSheetByName(sheetName);

      if (!sheet) { throw new Error(`L'onglet "${sheetName}" est introuvable dans la BDD.`); }

      const resultat = convertirQuestionsEnJSON(sheet);
      
      ui.alert(
        'Migration Terminée',
        `Rapport pour l'onglet "${sheetName}":\n\n` +
        `- Lignes traitées : ${resultat.lignesTraitees}\n` +
        `- Questions converties : ${resultat.questionsConverties}\n` +
        `- Lignes ignorées : ${resultat.lignesIgnorees}\n` +
        `- Erreurs rencontrées : ${resultat.erreurs.length}` +
        (resultat.erreurs.length > 0 ? `\n\nConsultez les logs ("Affichage > Journaux") pour le détail des erreurs.` : ''),
        ui.ButtonSet.OK);
    }
  } catch (e) {
    SpreadApp.getUi().alert(`Une erreur est survenue : ${e.message}`);
    console.error(`Erreur lors du lancement de la migration : ${e.stack}`);
  }
}

/**
 * Cœur de la logique de conversion. Lit une feuille et met à jour les lignes.
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet La feuille de calcul à traiter.
 * @returns {object} Un objet contenant les statistiques de la migration.
 */
function convertirQuestionsEnJSON(sheet) {
  const dataRange = sheet.getDataRange();
  const values = dataRange.getValues();
  const headers = values.shift(); 

  const colIndex = {
    type: headers.indexOf('TypeQuestion'),
    options: headers.indexOf('Options'),
    logique: headers.indexOf('Logique'),
    description: headers.indexOf('Description'),
    json: headers.indexOf('Paramètres (JSON)')
  };

  if (colIndex.type === -1 || colIndex.options === -1 || colIndex.logique === -1 || colIndex.json === -1) {
    throw new Error("Colonnes requises ('TypeQuestion', 'Options', 'Logique', 'Paramètres (JSON)') manquantes.");
  }
  
  let questionsConverties = 0;
  let lignesIgnorees = 0;
  const erreurs = [];

  values.forEach((row, index) => {
    const jsonCell = row[colIndex.json];
    if (jsonCell) {
      lignesIgnorees++;
      return;
    }

    const typeQuestion = row[colIndex.type];
    const optionsStr = row[colIndex.options];
    const logiqueStr = row[colIndex.logique];
    const descriptionStr = colIndex.description !== -1 ? row[colIndex.description] : "";
    let jsonPayload = null;

    try {
      switch (typeQuestion) {
        case 'CHOIX_BINAIRE':
          if (optionsStr && logiqueStr) {
            const optionsArray = optionsStr.toString().split(';').map(s => s.trim());
            const logiqueArray = logiqueStr.toString().split(';').map(s => s.trim());
            if (optionsArray.length !== logiqueArray.length) {
              throw new Error(`CHOIX_BINAIRE: Le nombre d'options (${optionsArray.length}) et de logiques (${logiqueArray.length}) ne correspond pas.`);
            }
            jsonPayload = {
              mode: 'QRM_CAT',
              options: optionsArray.map((libelle, i) => ({ libelle: libelle, profil: logiqueArray[i], valeur: 1 }))
            };
          }
          break;

        case 'ECHELLE':
          if (optionsStr && logiqueStr) { // La description n'est pas bloquante
            const echelle = optionsStr.toString().split(';').map(s => parseInt(s.trim(), 10));
            const labels = descriptionStr ? descriptionStr.toString().split(';').map(s => s.trim()) : ["", ""];
            
            jsonPayload = {
              mode: 'ECHELLE_NOTE',
              profil: logiqueStr.toString().trim(),
              echelle_min: Math.min(...echelle),
              echelle_max: Math.max(...echelle),
              label_min: labels[0] || "",
              label_max: labels[1] || ""
            };
          }
          break;

        default:
          lignesIgnorees++;
          break;
      }

      if (jsonPayload) {
        sheet.getRange(index + 2, colIndex.json + 1).setValue(JSON.stringify(jsonPayload));
        questionsConverties++;
      } else {
        lignesIgnorees++;
      }

    } catch (e) {
      const errorMessage = `Erreur à la ligne ${index + 2}: ${e.message}`;
      console.error(errorMessage);
      erreurs.push(errorMessage);
    }
  });

  return {
    lignesTraitees: values.length,
    questionsConverties: questionsConverties,
    lignesIgnorees: lignesIgnorees,
    erreurs: erreurs
  };
}
// --- Fin du fichier: MigrationV1.js ---

// --- Début du fichier: Diagnostic.js ---
/**
 * Ce script est un outil de diagnostic à usage unique.
 * Il va créer un formulaire et inspecter l'objet retourné pour
 * comprendre pourquoi la fonction .getShortUrl() n'est pas trouvée.
 */
function testCreationFormulaire() {
  try {
    Logger.log("--- Début du test de diagnostic de création de formulaire ---");
    
    // Étape 1 : On crée un formulaire de test.
    const form = FormApp.create("Test de Diagnostic Ultime");
    Logger.log("Objet 'form' créé.");

    // Étape 2 : On vérifie si la fonction qui pose problème existe VRAIMENT sur cet objet.
    if (form && typeof form.getShortUrl === 'function') {
      Logger.log("--> RÉSULTAT POSITIF : La fonction .getShortUrl() a été trouvée !");
      Logger.log("    Lien court obtenu : " + form.getShortUrl());
    } else {
      Logger.log("--> RÉSULTAT NÉGATIF : La fonction .getShortUrl() est INTROUVABLE sur l'objet 'form'.");
    }
    
    // Étape 3 : On liste toutes les propriétés et méthodes que l'on trouve sur l'objet.
    // Cela nous dira ce qu'est réellement l'objet 'form'.
    let properties = [];
    for (var name in form) {
      properties.push(name);
    }
    Logger.log("Liste de toutes les propriétés trouvées sur l'objet : " + properties.join(', '));

    // On supprime le formulaire de test pour ne pas polluer votre Drive.
    DriveApp.getFileById(form.getId()).setTrashed(true);
    Logger.log("Formulaire de test supprimé.");

  } catch (e) {
    Logger.log("ERREUR CATASTROPHIQUE lors du test de diagnostic : " + e.toString());
    Logger.log(e.stack);
  }
  Logger.log("--- Fin du test de diagnostic ---");
}

// --- Fin du fichier: Diagnostic.js ---

// --- Début du fichier: EmailCompositionUtils.js ---
function normalizeAndDedupeCompositionEmails_(rows) {
  const seen = new Set();
  return rows
    .map(r => {
      const out = Object.assign({}, r);
      out.Element = (out.Element || '').toString().trim();
      return out;
    })
    .filter(r => {
      const key = [
        r.Type_Test || '',
        r.Code_Langue || '',
        r.Code_Niveau_Email || '',
        r.Code_Profil || '',
        r.Element || '',
        r.Ordre || ''
      ].join('|');
      if (seen.has(key)) return false;
      seen.add(key);
      return true;
    });
}

// --- Fin du fichier: EmailCompositionUtils.js ---

