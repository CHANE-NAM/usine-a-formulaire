=== Projet: [CONFIG]V2 Usine Ã  Tests (G:\Mon Drive\APPLI TEST Personnalité Drive\Projet USINE à FORMULAIRE GoogleForm\02_configuration) ===


--- FILE: G:\Mon Drive\APPLI TEST Personnalité Drive\Projet USINE à FORMULAIRE GoogleForm\02_configuration\appsscript.json ---

{
  "timeZone": "Indian/Mauritius",
  "dependencies": {
  },
  "exceptionLogging": "STACKDRIVER",
  "runtimeVersion": "V8"
}

--- FILE: G:\Mon Drive\APPLI TEST Personnalité Drive\Projet USINE à FORMULAIRE GoogleForm\02_configuration\Menu.js ---

// =================================================================================
// == FICHIER : menu.gs
// == VERSION : 3.6 (Valeur par dÃ©faut "Universel" pour Moteur_Calcul)
// == RÃ”LE  : Logique cÃ´tÃ© serveur pour l'application web de configuration.
// =================================================================================

const ID_FEUILLE_CONFIG = "1kLBqIHZWbHrb4SsoSQcyVsLOmqKHkhSA4FttM5hZtDQ";

// --- SECTION 1 : INTERFACE UTILISATEUR ---

function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('ðŸš€ Actions Usine')
    .addItem('Configurer un nouveau test...', 'showConfigurationSidebar')
    .addToUi();
}

function showConfigurationSidebar() {
  const html = HtmlService.createHtmlOutputFromFile('FormulaireUI')
      .setTitle('Configuration Usine Ã  Tests')
      .setWidth(400);
  SpreadsheetApp.getUi().showSidebar(html);
}


// --- SECTION 2 : FONCTIONS APPELÃ‰ES PAR L'INTERFACE HTML ---

function getInitialData() {
  const ss = SpreadsheetApp.openById(ID_FEUILLE_CONFIG);
  const optionsSheet = ss.getSheetByName("sys_Options_Parametres");
  if (!optionsSheet) {
    throw new Error("L'onglet 'sys_Options_Parametres' est introuvable.");
  }

  const optionsData = optionsSheet.getDataRange().getValues();
  const headers = optionsData.shift();
  const optionsMap = {};
  headers.forEach((header, i) => {
    const options = optionsData.map(row => row[i]).filter(String);
    optionsMap[header] = options;
  });

  // Charger la liste des blocs mÃ©ta disponibles depuis la BDD
  let availableMetaBlocks = [];
  try {
    const systemIds = getSystemIds();
    const bdd = SpreadsheetApp.openById(systemIds.ID_BDD);
    const metaSheet = bdd.getSheetByName('Questions_META_FR');
    if (metaSheet) {
        const metaData = metaSheet.getRange(2, 1, metaSheet.getLastRow() - 1, 3).getValues(); // ID, Type, Titre
        availableMetaBlocks = metaData.map(row => ({ id: row[0], title: row[2] })).filter(block => block.id && block.title);
    }
  } catch(e) {
    console.error("Impossible de charger les blocs mÃ©ta depuis la BDD : " + e.message);
  }

  return {
    typesDeTest: optionsMap['Type_Test'] || [],
    availableMetaBlocks: availableMetaBlocks,
    options: {
      Repondant_Quand: optionsMap['Repondant_Quand'] || [],
      Repondant_Contenu: optionsMap['Repondant_Contenu'] || [],
      Patron_Quand: optionsMap['Patron_Quand'] || [],
      Patron_Contenu: optionsMap['Patron_Contenu'] || [],
      Formateur_Quand: optionsMap['Formateur_Quand'] || [],
      Formateur_Contenu: optionsMap['Formateur_Contenu'] || []
    }
  };
}

function getQuestionCountForTestType(typeTest) {
  if (!typeTest) return 0;
  try {
    const systemIds = getSystemIds();
    if (systemIds && systemIds.ID_BDD) {
      const bdd = SpreadsheetApp.openById(systemIds.ID_BDD);
      const questionSheet = bdd.getSheets().find(s => s.getName().startsWith('Questions_' + typeTest));
      if (questionSheet) {
        return questionSheet.getLastRow() - 1;
      }
    }
    return 0;
  } catch (err) {
    Logger.log('Erreur lors du calcul du nombre de questions pour ' + typeTest + ': ' + err.message);
    return 0;
  }
}


// --- SECTION 3 : TRAITEMENT DE LA SOUMISSION ---

function processNewTestConfiguration(formObject) {
  try {
    const ss = SpreadsheetApp.openById(ID_FEUILLE_CONFIG);
    const paramsSheet = ss.getSheetByName("ParamÃ¨tres GÃ©nÃ©raux");
    if (!paramsSheet) { throw new Error("L'onglet 'ParamÃ¨tres GÃ©nÃ©raux' est introuvable."); }
    
    let headers = paramsSheet.getRange(1, 1, 1, paramsSheet.getLastColumn()).getValues()[0];
    
    // ==================== DÃ‰BUT MODIFICATION ====================
    // On s'assure que les colonnes requises, y compris Moteur_Calcul, existent.
    const requiredHeaders = ['Blocs_Meta_A_Inclure', 'ID_Gabarit_Email_Repondant', 'Email_Alias', 'Moteur_Calcul'];
    // ===================== FIN MODIFICATION =====================

    requiredHeaders.forEach(headerName => {
        if (headers.indexOf(headerName) === -1) {
            paramsSheet.getRange(1, paramsSheet.getLastColumn() + 1).setValue(headerName);
        }
    });
    headers = paramsSheet.getRange(1, 1, 1, paramsSheet.getLastColumn()).getValues()[0];
    
    let emailDev = formObject.devEmail;
    if (!emailDev || emailDev.trim() === "") { emailDev = "chanenam@gmail.com"; }

    const limiteLignes = getQuestionCountForTestType(formObject.type);
    const blocsMetaString = formObject.blocsMeta.join(',');

    let idGabaritRepondant = ''; // Valeur par dÃ©faut
    if (formObject.repondantContenu && formObject.repondantContenu.includes('Niveau1')) {
        idGabaritRepondant = 'RESULTATS_N1';
    } else if (formObject.repondantContenu && formObject.repondantContenu.includes('Niveau2')) {
        idGabaritRepondant = 'RESULTATS_N2';
    } else if (formObject.repondantContenu && formObject.repondantContenu.includes('Niveau3')) {
        idGabaritRepondant = 'RESULTATS_N3';
    }

    const dataRow = {
      'Id_Unique': '',
      'Titre_Formulaire_Utilisateur': formObject.titre,
      'Nom_Fichier_Complet': '',
      'Statut': 'En construction',
      'Type_Test': formObject.type,
      // ==================== DÃ‰BUT MODIFICATION ====================
      'Moteur_Calcul': 'Universel', // On force le moteur Universel par dÃ©faut
      // ===================== FIN MODIFICATION =====================
      'Blocs_Meta_A_Inclure': blocsMetaString,
      'ID_Gabarit_Email_Repondant': idGabaritRepondant,
      'ID_Dossier_Cible': '',
      'Limite_Lignes_A_Traiter': limiteLignes,
      'nbQuestions': formObject.nbQuestions,
      'Repondant_Email_Actif': formObject.repondantActif ? "Oui" : "Non",
      'Repondant_Quand': formObject.repondantQuand,
      'Repondant_Contenu': formObject.repondantContenu,
      'Patron_Email_Mode': formObject.patronActif ? "Oui" : "Non",
      'Patron_Quand': formObject.patronQuand,
      'Patron_Contenu': formObject.patronContenu,
      'Patron_Email': formObject.patronEmail,
      'Formateur_Email_Actif': formObject.formateurActif ? "Oui" : "Non",
      'Formateur_Quand': formObject.formateurQuand,
      'Formateur_Contenu': formObject.formateurContenu,
      'Formateur_Email': formObject.formateurEmail,
      'Developpeur_Email': emailDev,
      'ID_Formulaire_Cible': '',
      'ID_Sheet_Cible': '',
      'Email_Alias': formObject.emailAlias
    };
    
    const nouvelleLigne = headers.map(header => dataRow[header] !== undefined ? dataRow[header] : '');
    paramsSheet.appendRow(nouvelleLigne);
    return "Configuration enregistrÃ©e avec succÃ¨s !";
  } catch (e) {
    Logger.log("ERREUR lors de la sauvegarde de la configuration: " + e.toString());
    throw new Error("Une erreur interne est survenue lors de la sauvegarde. " + e.message);
  }
}


// --- SECTION 4 : FONCTIONS UTILITAIRES ---

function getSystemIds() {
  const configSS = SpreadsheetApp.openById(ID_FEUILLE_CONFIG);
  const idSheet = configSS.getSheetByName('sys_ID_Fichiers');
  if (!idSheet) { throw new Error("L'onglet 'sys_ID_Fichiers' est introuvable."); }
  const data = idSheet.getDataRange().getValues();
  const ids = {};
  data.slice(1).forEach(row => {
    if (row[0] && row[1]) ids[row[0]] = row[1];
  });
  return ids;
}

--- FILE: G:\Mon Drive\APPLI TEST Personnalité Drive\Projet USINE à FORMULAIRE GoogleForm\02_configuration\concat_scripts_repvic.js ---

const fs = require('fs');
const path = require('path');

// --- CONFIGURATION ---
// Extensions de fichiers Ã  inclure
const scriptExtensions = [
    '.js', '.ts', '.jsx', '.tsx', '.py', '.html', '.css', '.scss', '.less',
    '.xml', '.php', '.rb', '.java', '.c', '.cpp', '.cs', '.go',
    '.sh', '.ps1', '.bat', '.cmd', '.sql', '.vue', '.svelte', '.astro'
];

// Le dossier Ã  scanner
const folderToScan = './'; // Ã€ ajuster si besoin
// --- FIN CONFIGURATION ---

// RÃ©cupÃ©rer le nom du rÃ©pertoire scannÃ©
const resolvedFolderPath = path.resolve(folderToScan);
const dirName = path.basename(resolvedFolderPath);

// CrÃ©er une date au format aammjj
const now = new Date();
const year = String(now.getFullYear()).slice(2); // 2 derniers chiffres de l'annÃ©e
const month = String(now.getMonth() + 1).padStart(2, '0');
const day = String(now.getDate()).padStart(2, '0');
const dateStamp = `${year}${month}${day}`;

// Nom du fichier de sortie
const outputFileName = `${dirName}_Script_${dateStamp}.txt`;

// CrÃ©er une chaÃ®ne avec date et heure en franÃ§ais
const dateTimeString = `// Fichier gÃ©nÃ©rÃ© le ${now.toLocaleDateString('fr-FR')} Ã  ${now.toLocaleTimeString('fr-FR')}\n\n`;

// Initialiser la variable qui accumulera le contenu
let allContent = dateTimeString;

// Fonction rÃ©cursive
function readFilesRecursively(directory) {
    fs.readdirSync(directory).forEach(file => {
        const absolutePath = path.join(directory, file);
        if (fs.statSync(absolutePath).isDirectory()) {
            readFilesRecursively(absolutePath);
        } else {
            const fileExtension = path.extname(file).toLowerCase();
            // --- MODIFICATION ICI ---
            // On vÃ©rifie l'extension ET on exclut les fichiers commenÃ§ant par 'concat_scripts'
            if (scriptExtensions.includes(fileExtension) && !file.startsWith('concat_scripts')) {
                allContent += `// --- DÃ©but du fichier: ${absolutePath} ---\n`;
                allContent += fs.readFileSync(absolutePath, 'utf8');
                allContent += `\n// --- Fin du fichier: ${absolutePath} ---\n\n`;
            }
        }
    });
}

// Supprimer le fichier de sortie existant
if (fs.existsSync(outputFileName)) {
    fs.unlinkSync(outputFileName);
    console.log(`Ancien fichier '${outputFileName}' supprimÃ©.`);
}

// Lancer le traitement
try {
    readFilesRecursively(folderToScan);
    fs.writeFileSync(outputFileName, allContent, 'utf8');
    console.log(`SuccÃ¨s : Tous les scripts ont Ã©tÃ© exportÃ©s dans '${outputFileName}'`);
} catch (error) {
    console.error(`Erreur lors de la lecture ou de l'Ã©criture des fichiers : ${error.message}`);
}

--- FILE: G:\Mon Drive\APPLI TEST Personnalité Drive\Projet USINE à FORMULAIRE GoogleForm\02_configuration\UtilitaireConversion.js ---

// Remplacez cette variable par l'ID de votre feuille de calcul [CONFIG]V2 Usine Ã  Tests.
// const ID_FEUILLE_CONFIG = "1kLBqIHZWbHrb4SsoSQcyVsLOmqKHkhSA4FttM5hZtDQ";

/**
 * Fonction Ã  usage unique pour convertir toutes les URLs de formulaires existantes
 * dans l'onglet 'ParamÃ¨tres GÃ©nÃ©raux' en leurs versions courtes (forms.gle).
 */
function convertirLiensExistantsEnCourts() {
  const nomOnglet = "ParamÃ¨tres GÃ©nÃ©raux";
  
  try {
    const ss = SpreadsheetApp.openById(ID_FEUILLE_CONFIG);
    const sheet = ss.getSheetByName(nomOnglet);
    
    if (!sheet) {
      throw new Error(`L'onglet "${nomOnglet}" est introuvable.`);
    }
    
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    const headers = values[0];
    
    // Trouve automatiquement la colonne contenant les liens
    const linkColumnIndex = headers.indexOf("Lien_Formulaire_Public");
    if (linkColumnIndex === -1) {
      throw new Error("La colonne 'Lien_Formulaire_Public' est introuvable.");
    }

    // Boucle sur chaque ligne (en sautant l'en-tÃªte)
    for (let i = 1; i < values.length; i++) {
      const longUrl = values[i][linkColumnIndex];
      
      // Ne traite que les URLs longues et non vides
      if (longUrl && typeof longUrl === 'string' && longUrl.includes("docs.google.com/forms")) {
        // Extrait l'ID du formulaire Ã  partir de l'URL longue
        const formId = longUrl.split('/d/')[1].split('/')[0];
        
        if (formId) {
          // Ouvre le formulaire par son ID et obtient l'URL courte
          const form = FormApp.openById(formId);
          const shortUrl = form.getShortUrl();
          
          // Met Ã  jour la cellule avec la nouvelle URL courte
          // Les indices de range commencent Ã  1, donc i+1 et linkColumnIndex+1
          sheet.getRange(i + 1, linkColumnIndex + 1).setValue(shortUrl);
          Logger.log(`Ligne ${i + 1}: URL convertie pour le formulaire ${formId}`);
        }
      }
    }
    
    SpreadsheetApp.getUi().alert("Conversion terminÃ©e avec succÃ¨s !");
    
  } catch (e) {
    Logger.log(`Erreur lors de la conversion : ${e.toString()}`);
    SpreadsheetApp.getUi().alert(`Une erreur est survenue : ${e.message}`);
  }
}
